gcc simple.c -o simple.s  -static -Wall --debug -T elf_x86_64.x2 -O0 -fno-plt -no-pie -S -fno-stack-protector -Wl,-z,norelro -static-pie


* 元のコンパイルスクリプトの場所
./lib/x86_64-linux-gnu/ldscripts/elf_x86_64.x

* セグメント位置をしる(ヘッダリストを表示) / セグメントのRWE属性をしる
 readelf -l ./loader

 * セグメントを実行可能に変更
 ./chflg ./loader

 * 対象のコンパイル
 gcc simple.c -o simple -static -Wall --debug -O0

 * ローダのコンパイル
 gcc loader.c -o loader -static -Wall --debug -O0 -T space.script

 * おちる直前
 ```
 => 0x400ff6 <__libc_start_main+518>:	mov    0x2b7aa3(%rip),%rax        # 0x6b8aa0 <_dl_random>
pc=0x400ff6, rip=0x400ff6, rdi=0x1002, rax=0x1180, rbx=0x400400, rsp=0xffffde30, rsi=0x6bd880
0x0000000000400ffd in __libc_start_main ()
=> 0x400ffd <__libc_start_main+525>:	mov    (%rax),%rax
pc=0x400ffd, rip=0x400ffd, rdi=0x1002, rax=0xffffe189, rbx=0x400400, rsp=0xffffde30, rsi=0x6bd880
0x0000000000401000 in __libc_start_main ()
```
となっている。この0x6b8aa0というのは、0x2b7aa3と次の0x400ffdとの和になっている。
この0x6b8aa0の中身(dl_random)が、失敗時には0になっているらしい。
これを代入しているのはdl_aux_initというところらしい。
これをもとに調べると https://smallkirby.hatenablog.com/?page=1560668676 が出てくるが解決せず。
代入しているところがローダ経由だとないので、分岐点を探すと0x44b93dが出てくる。


* argcの位置
```
(gdb) x/40x $sp-64
0x7fffffffdc00: 0x00ab9018      0x00000000      0x00000000      0x00000000
0x7fffffffdc10: 0xffffdd40      0x00007fff      0x0080fc64      0x00000000
0x7fffffffdc20: 0x00000018      0x00000030      0xffffdd00      0x00007fff
0x7fffffffdc30: 0xffffdc40      0x00007fff      0x00400e38      0x00000000
0x7fffffffdc40: 0x006b6120      0x00000000      0x00ab9140      0xffffdf48
0x7fffffffdc50: 0xffffdd58      0x00007fff      0x00400b6d      0x00000000
0x7fffffffdc60: 0x00000022      0x00000000      0x00000022      0x00000000
0x7fffffffdc70: 0x00000012      0x00000000      0xffffdd50      0x00007fff
0x7fffffffdc80: 0xffffdc90      0x00007fff      0x0081392d      0x00000000
0x7fffffffdc90: 0x00000012      0x0000001a      0x00ab9140      0x00000000
(gdb) p $pc
$7 = (void (*)()) 0x400e38
(gdb)
```
ない…

```

=> 0x400e0a <__libc_start_main+26>:	mov    %rdx,0x10(%rsp)
pc=0x400e0a, rip=0x400e0a, rdi=0x400b6d, rax=0x0, rbx=0x0, rsp=0xffffde30, rsi=0x1
0x7fffffffde30:	0x00000000	0x00000000	0x00000000	0x00000000
0x0000000000400e0f in __libc_start_main ()
=> 0x400e0f <__libc_start_main+31>:	mov    $0x0,%rdx
pc=0x400e0f, rip=0x400e0f, rdi=0x400b6d, rax=0x0, rbx=0x0, rsp=0xffffde30, rsi=0x1
0x7fffffffde30:	0x00000000	0x00000000	0x00000000	0x00000000
0x0000000000400e16 in __libc_start_main ()
=> 0x400e16 <__libc_start_main+38>:	mov    %rdi,0x18(%rsp)
pc=0x400e16, rip=0x400e16, rdi=0x400b6d, rax=0x0, rbx=0x0, rsp=0xffffde30, rsi=0x1
0x7fffffffde30:	0x00000000	0x00000000	0x00000000	0x00000000
0x0000000000400e1b in __libc_start_main ()
=> 0x400e1b <__libc_start_main+43>:	mov    %esi,0xc(%rsp)
pc=0x400e1b, rip=0x400e1b, rdi=0x400b6d, rax=0x0, rbx=0x0, rsp=0xffffde30, rsi=0x1
0x7fffffffde30:	0x00000000	0x00000000	0x00000000	0x00000000
0x0000000000400e1f in __libc_start_main ()
=> 0x400e1f <__libc_start_main+47>:	test   %rdx,%rdx
pc=0x400e1f, rip=0x400e1f, rdi=0x400b6d, rax=0x0, rbx=0x0, rsp=0xffffde30, rsi=0x1
0x7fffffffde30:	0x00000000	0x00000000	0x00000000	0x00000001
0x0000000000400e22 in __libc_start_main ()
=> 0x400e22 <__libc_start_main+50>:	je     0x400e2d <__libc_start_main+61>
pc=0x400e22, rip=0x400e22, rdi=0x400b6d, rax=0x0, rbx=0x0, rsp=0xf
```
この辺で必要箇所に本来位置からコピーしてるらしい。


```
gdb -x trackpc.py ./loader > log3_1.txt
gdb -x trackpc.py ./simple > log4_1.txt
```

```
=> 0x400a55 <_start+5>:	pop    %rsi
pc=0x400a55, rip=0x400a55, rdi=0x0, rax=0x0, rbx=0x0, rsp=0xffffdf40, rsi=0x0
```
ここでargcをrsiにひきおとせるらしい。